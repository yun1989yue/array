Given two arrays, write a function to compute their intersection.

Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].

Note:
Each element in the result must be unique.
The result can be in any order.

M1: BF
1) for each element in nums1, find whether it is also contained by nums2
2) sort the res
3) clear the repeated nums

T&S: mn+nlogn+n = O(mn) O(n)

C:
class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        tmp = []
        for n1 in nums1:
            for n2 in nums2:
                if n1 == n2:
                    tmp.append(n1)
                    break
        if len(tmp) <2:
            return tmp
        tmp.sort()
        res =[tmp[0]]
        for i in xrange(1,len(tmp)):
            if tmp[i-1] != tmp[i]:
                res.append(tmp[i])
        return res
        
M2: HashTable
1) put all element of shorter array to a dict with value 1
2) for each element in longer array, if it exists in the dict, assign 0 to the element
3) for each element in the dict, if its value is 0, append it to the res

T&S: m+2*n = O(m) O(n)

C:
class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        if len(nums2) > len(nums1):
            return self.intersection(nums2, nums1)
        dct = {}
        res = []
        for n in nums2:
            dct[n] = 1
        for n in nums1:
            if n in dct:
                dct[n] = 0
        for item in dct:
            if dct[item] == 0:
                res.append(item)
        return res
        
M3: set and list
1) force both arrays into sets
2) force & of two sets into one array

C:
class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        return list((set(nums1))&(set(nums2)))
        

M4: two pointers
1) sort both arrays
2) use two pointers

T&Sï¼šmlogm+nlogn+m+n O(mlogm) O(1)

C:
class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        res = []
        nums1.sort()
        nums2.sort()
        i = 0
        j = 0
        while i < len(nums1) and j < len(nums2):
            if nums1[i] < nums2[j]:
                i+=1
            elif nums1[i] > nums2[j]:
                j+=1
            else:
                if len(res) == 0 or res[-1] != nums1[i]:
                    res.append(nums1[i])
                i+=1
                j+=1
        return res
        
M5: binarysearch
1) sort shorter list
2) for each elem in longer list, use binarysearch to find whether it exists in 
shorter list, if so, add it to res

T&S: O(nlogn) O(n)

C:
class Solution(object):
    def intersection(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: List[int]
        """
        if len(nums2) > len(nums1):
            return self.intersection(nums2, nums1)
        nums2.sort()
        res = set()
        for n in nums1:
            if self.BinarySearch(n, nums2):
                res.add(n)
        return list(res)
        
    def BinarySearch(self, target, nums):
        low = 0
        high = len(nums)-1
        while low <= high:
            mid = (low + high)/2
            if nums[mid] == target:
                return True
            elif nums[mid] > target:
                high = mid-1
            else:
                low = mid+1
        return False
 



